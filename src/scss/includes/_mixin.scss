@charset 'utf-8';

/*Clearfix*/
@mixin clearfix {
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

/*Align the right way*/
@mixin align($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    -webkit-transform: translate(-50%, 0);
        -ms-transform: translate(-50%, 0);
            transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    -webkit-transform: translate(0, -50%);
        -ms-transform: translate(0, -50%);
            transform: translate(0, -50%);
  }
}

@mixin visual-hide() {
  border: 0;
  clip: rect(0 0 0 0); height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/* ==========================================================================
  Flexbox Grid Mixins v.0.1.3
  GitHub: https://github.com/thingsym/flexbox-grid-mixins
  ========================================================================== */
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}
%flexbox { @include flexbox; }
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}
%inline-flex { @include inline-flex; }

/* Values: row | row-reverse | column | column-reverse*/
/* Default: row*/
@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: $value;
}
  /* Shorter version:*/
  @mixin flex-dir($args...) { @include flex-direction($args...); }

/* Values: nowrap | wrap | wrap-reverse*/
/* Default: nowrap*/
@mixin flex-wrap($value: nowrap) {
  /* No Webkit Box fallback.*/
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else { 
    -ms-flex-wrap: $value; 
  }
  -ms-flex-wrap: $value;
      flex-wrap: $value;
}

/* Values: <flex-direction> | <flex-wrap> */
/* Default: row nowrap*/
@mixin flex-flow($values: (row nowrap)) {
  /* No Webkit Box fallback.*/
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-flow: $values;
}

/* Default: 0*/
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

/* Default: 0*/
@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

/* Default: 1*/
@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

/* Values: Like "width" */
/* Default: auto*/
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

/* Values: none | <flex-grow> <flex-shrink> || <flex-basis>*/
/* Default: See individual properties (1 1 0).*/
@mixin flex($fg: 1, $fs: null, $fb: null) {
  /* Set a variable to be used by box-flex properties*/
  $fg-boxflex: $fg;
  /* Box-Flex only supports a flex-grow value so let's grab the*/
  /* first item in the list and just return that.*/
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }
  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

/* Values: flex-start | flex-end | center | space-between | space-around*/
/* Default: flex-start*/
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;    
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  -webkit-box-pack: $value;
      -ms-flex-pack: $value;
          justify-content: $value;
}
  /* Shorter version:*/
  @mixin flex-just($args...) { @include justify-content($args...); }

/* Values: flex-start | flex-end | center | baseline | stretch*/
/* Default: stretch*/
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  -webkit-box-align: $value;
      -ms-flex-align: $value;
          align-items: $value;
}

/* Values: auto | flex-start | flex-end | center | baseline | stretch*/
/* Default: auto*/
@mixin align-self($value: auto) {
  /* No Webkit Box Fallback.*/
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  -ms-flex-item-align: $value;
      -ms-grid-row-align: $value;
      align-self: $value;
}

/* Values: flex-start | flex-end | center | space-between | space-around | stretch*/
/* Default: stretch*/
@mixin align-content($value: stretch) {
  /* No Webkit Box Fallback.*/
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  -ms-flex-line-pack: $value;
      align-content: $value;
}

